sealed trait TreeLoc[A] {
  val tree: Tree[A]
  val lefts: TreeForest[A]
  val rights: TreeForest[A]
  val parents: Parents[A]
  def parent: Option[TreeLoc[A]] = ...
  def root: TreeLoc[A] = ...
  def left: Option[TreeLoc[A]] = ...
  def right: Option[TreeLoc[A]] = ...
  def firstChild: Option[TreeLoc[A]] = ...
  def lastChild: Option[TreeLoc[A]] = ...
  def getChild(n: Int): Option[TreeLoc[A]] = ...
  def findChild(p: Tree[A] => Boolean): Option[TreeLoc[A]] = ...
  def modifyTree(f: Tree[A] => Tree[A]): TreeLoc[A] = ...
  def modifyLabel(f: A => A): TreeLoc[A] = ...
  def insertDownLast(t: Tree[A]): TreeLoc[A] = ...
}
